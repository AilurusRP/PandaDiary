import 'dart:io';
import 'package:path_provider/path_provider.dart';

import '../db/data_models/note_data.dart';
import '../db/db_manager.dart';

void exportNotes({required Function(Object?) onFall}) async {
  List<NoteData> data = await _getAllNotesData();
  data.forEach((noteData) {
    _writeTextToPublicDocument(
      fileName: 'panda_diary.${noteData.id}.backup',
      content:
          "id:${noteData.id}\ntitle:${noteData.title}\ncontent:\n${noteData.content}",
    ).onError((err, stackTrace) {
      onFall(err);
    });
  });
}

Future<List<NoteData>> _getAllNotesData() async {
  List<NoteData> value = [];
  final dbManager = DBManager<NoteData>(
      tableName: NoteData.tableName, fields: NoteData.fields);
  value = await (await dbManager.open()).query(NoteData.fromMap);
  return value;
}

// Functions below are generated by Proton Lumo AI
Future<Directory?> _getPublicDocumentsDirectory() async {
  final Directory? dir = await getExternalStorageDirectory();

  if (dir != null) {
    return dir; // .../Android/data/<package name>/files
  }

  // If it’s still null, it indicates that
  // the runtime environment isn’t supported
  // (e.g., on Android versions below 9).
  return null;
}

Future<void> _writeTextToPublicDocument({
  required String fileName,
  required String content,
}) async {
  final Directory? docsDir = await _getPublicDocumentsDirectory();

  if (docsDir == null) {
    throw Exception(
        'Unable to retrieve the public documents directory (possibly on devices running Android 9 or lower).');
  }

  if (!await docsDir.exists()) {
    await docsDir.create(recursive: true);
  }

  Directory exportDir = Directory("${docsDir.path}/export");
  exportDir.create();

  final File file = File('${exportDir.path}/$fileName');

  await file.writeAsString(content, flush: true);
}

Future<String> _readTextFromPublicDocument({
  required String fileName,
}) async {
  final Directory? docsDir = await _getPublicDocumentsDirectory();

  if (docsDir == null) {
    throw Exception(
        'Unable to retrieve the public documents directory (possibly on devices running Android 9 or lower).');
  }

  final File file = File('${docsDir.path}/import/$fileName');

  if (!await file.exists()) {
    throw Exception("The file doesn't exist: ${file.path}");
  }

  return await file.readAsString();
}
